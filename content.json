[{"title":"ES6箭头函数需要注意的地方","date":"2017-01-24T08:32:31.000Z","path":"2017/01/24/ES6箭头函数需要注意的地方/","text":"箭头函数ECMAScript6允许使用箭头（=&gt;）来定义函数，大大减少代码量的同时，提高了不少代码的可读性，逼格也上升了一个档次。像这样：12345let fn = (a,b) =&gt;a+b;//等同于let fn = function(a,b)&#123; return a+b;&#125; 但古语云：‘函数无完函数’，箭头函数再使用时有几个需要注意的地方，自己用的时候要注意。 大括号的解释问题函数体代码多了就用他，显示写法，像这样：1234let fn3 = (a,b)=&gt;&#123; a = a + b; console.log(&apos;ss&apos;);&#125; 当返回是个大括号对象，再箭头右侧时会被解释为代码块，怎么办？此时需要再对象外面加上括号，像这样：1let fn3 = (a,b)=&gt;(&#123;userName:userName,passWord:passWord&#125;) 箭头函数的this1.箭头函数中的this为定义时所在的对象，非使用时所在的对象。比如:123456789function fn() &#123; return () =&gt; &#123; return () =&gt;&#123; return () =&gt;&#123; return this.id &#125; &#125; &#125;&#125; 上述内层函数多个return ,但都采用了箭头函数的形式，因此this均为定义时所再的fn这个this2.不可进行this的指向改变因为箭头函数根本没有自己的this，也就别指望通过call()/apply()/bind()等方法去改变this了。3.for循环绑定事件绑定事件中循环为每个相关元素事件，使用ES6的let时,使用箭头函数就不要使用this，此时的this为时间函数定义时的window全局。123456789ele.onClick = function ()&#123; for(let i = 0;i&lt;xx.length;i++)&#123; this.className = &apos;我是这个元素&apos;;//this为ele &#125; &#125; ele.onClick =&gt;&#123; for(let i = 0;i&lt;xx.length;i++)&#123; this.className = &apos;我是这个元素&apos;;//this为window &#125; 不可作为构造函数即父类不能采用箭头函数作为constructor,浏览器会友善的告诉你，erro~~ 不可采用arguments可以采用…arr，即rest参数（获取多余参数，放入数组），ES6中不存在arguments,比如： 1234567function fn()&#123; setTimeout(()=&gt;&#123; console.log(arguments); &#125;,100);&#125;//传参给fnfn(1.2.3); 上述最后打印出的arguments为fn 的arguments。 箭头套箭头上述也有，ES6中的箭头函数，可以嵌套的。上面也有用过。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"浏览器现用js引擎","date":"2017-01-23T14:49:48.000Z","path":"2017/01/23/浏览器现用js引擎/","text":"对于个浏览器现用的js的加载引擎，作简单的罗列。v8目前，采用v8引擎的浏览器Chrome,同时Node.js/Io.js/TrifleJS的运行环境也采用了v8。1V8是一个由丹麦Google开发的开源java script引擎，V8在执行之前将java script编译成了机器码的，而非字节码或是直译它，以此提升效能。更进一步，使用了如内联缓存（inline caching）等方法来提高性能。有了这些功能，java script程序与V8引擎的速度媲美二进制编译。 SpidermonkeyMozilla开发当然由其自己使用12345678SpiderMonkey是Mozilla项目的一部分，是一个用C语言实现的JavaScript脚本引擎，另外还有一个叫做Rhino的Java版本。为了在SpiderMonkey中运行JavaScript代码，应用程序必须有三个要素：JSRuntime，JSContext和全局对象。JSRuntime，为其中的JavaScript变量、对象、脚本和应用程序中使用的上下文分配空间。每个JSContext和脚本中的每个对象都生活在一个 JSRuntime中。他们不能转移到其他运行时上或在与其它运行时共享。一般来说大多数应用程序只需要一个运行时环境。上下文JSContext，就像是一台小机器，它涉及JavaScript代码和对象的很多东西。它可以编译和执行脚本、获取和设置对象属性、调用 JavaScript函数、一种类型转换为另一种JavaScript数据、创建对象，等等。几乎所有JSAPI函数都要一个JSContext*作为其第一个参数，就像&lt;stdio.h&gt;中的大多数函数都需要FILE*一样.全局对象包含所有可以在JavaScript代码中使用的类、函数和变量。 RhinoRhino目前再HTMLUnit——一款开源的java页面分析工具，可模拟浏览器运行。 1Rhino是一种使用 Java 语言编写的 JavaScript 的开源实现，原先由Mozilla开发，现在被集成进入JDK 6.0。与其他很多语言一样，Rhino 是一种动态类型的、基于对象的脚本语言，它可以简单地访问各种 Java 类库。 JavaScriptCoreJavaScriptCore，苹果浏览器safari使用的引擎。1是webkit的一个重要组成部分，主要是对JS进行解析和提供执行环境。代码开源。iOS7后苹果在iPhone平台推出，方便了对js的操作。使得脱离webview直接运行js成为可能。 ChakraIE和Edge的引擎，先默念三遍‘微软大法好~’，因为，windows官网目前开源了其核心部分，并号称Chakra 在运行速度和对 ES6 的支持上都将是业界领先的。123其核心为CharkraCore,ChakraCore 支持 x86/x64/ARM 架构 JavaScript 的Just-in-time (JIT) 编译，垃圾收集和大量的最新 JavaScript 特性。ChakraCore 还支持 JavaScript Runtime (JSRT) APIs，允许用户简单嵌入 ChakraCore 到应用中。ChakraCore 是一个功能完整的、独立的 JavaScript 虚拟机，可嵌入到衍生产品中，驱动需要脚本功能的产品如 NoSQL 数据库、生产力工具和游戏引擎。ChakraCore 现阶段只支持 Windows，但微软表示将类似 .NET 开源项目加入跨平台支持。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"ES6新手使用指南","date":"2017-01-21T08:31:38.000Z","path":"2017/01/21/ES6新手使用指南/","text":"表达式写法：123let fn0 = ()=&gt; console.log(&apos;xxxx&apos;);let fn = a=&gt;a;//箭头函数let fn1 = (a,b)=&gt;console.log(a+b); 函数体的写法：函数体代码多了就用他呗，显示写法123let fn3 = ()=&gt;&#123; console.log(&apos;ss&apos;);&#125; 实例化和继承es5写法123456789101112 function Fn() &#123; this.name = &apos;cat&apos;; &#125; Fn.prototype.getX = function () &#123; console.log(this.x); &#125; var fn = new Fn();//继承 var s = function () &#123; &#125; s.prototype = new Fn(); es6写法123456789101112131415161718192021 class Fn&#123; constructor()&#123; this.x = 100; this.y = 100; &#125; //es6中constructor外的都为公有 getX()&#123; alert(this.x); &#125; &#125; var f = new Fn(1);//Es6中的继承，像极了java class s extends Fn&#123; ``super()要写，因为没他不行`` constructor()&#123;super();this.z = &apos;memeda&apos;;&#125; happy()&#123; alert(&apos;happy&apos;); &#125; &#125; 对象字面量作用1：写法简化：123456789//文艺青年之普通写法 var a =1,b=2; var obj=&#123; a:a,b:b &#125;//es6写法 let a =1,b=2; let obj = &#123;a,b&#125;; 作用2：牛x之处在于es6可以方便继承啊！再原型属性中添加要继承的，这样可以直接继承。1let obj1 = &#123;__proto__:obj&#125;; 模板字符串 123//显然es6再字符串拼接时可以使用``再里面进行类似jquery的选择器进行拼接var str = &apos;lisong&apos;;var str2 = `lala,$&#123;str&#125;`; 解构赋值，主要用于react native,作用为将复杂框架对象中需要的组件引入后付给对象. 12345var obj = &#123;a:10,b:11,fn:function () &#123;&#125;&#125;var obj2 = &#123;a:9,b:12,fn:function () &#123;&#125;&#125;var obj3 =&#123;aa:obj,bb:obj2 &#125;;var &#123;aa,bb&#125; = obj3;//解构，对象略复杂了,将obj3解构赋值给简单的对象alert(aa.a); 默认赋值,任意赋值,扩展运算符 12345678910111213//默认参数function sum(a=3,b=4) &#123; console.log(a+b);//此时调用sum(),没实参，则走默认参数，弹出7&#125;//参数不确定,使用...+arr，可以直接用了。function sum(a,b,...ary) &#123; console.log(...ary);&#125;//扩展运算符,有点像concatvar ary = [1,2,3,4];var ary1 = [...ary,3,3];//此时已经将ary放在了ary1里面 let const let:不能进行预解释，会形成块级作用域，块级作用域中的this就会变为上级作用域的this const:不能进行预解释，无法二次赋值123for(let i = 0;i&lt;xx.length;i++)&#123;//此时再循环中就会形成一个块级作用域，每一次i就会单独作为作用域参数使用。&#125;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"脑图：css3的一些新特性","date":"2017-01-21T06:59:13.000Z","path":"2017/01/21/css的一些新特性脑图汇总/","text":"看书并总结了一些css3的新特性，并没有以博客的形式展现，而是直接使用了百度脑图，脉络更加清晰一些，也方便记忆，但是百度脑图不能很好的支持移动端浏览器，会出现错误，比如某些属性的备注再移动端无法显示，那就显得有点干巴巴了。新鲜货，欢迎品尝~ css3的一些新特性的脑图链接，可戳此.缩略图如下：","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"一年喵生","date":"2017-01-20T10:19:07.000Z","path":"2017/01/20/一年喵生/","text":"(一)第一次看见他，是他出生后不到半个月。在一个纸盒里有4只小小的猫，其中3只长得像极夏目友人帐的猫咪老师，这3只紧紧萌在一起，煞是可爱。另外一只有一身黄白相间的斑纹（遗传了猫爸的白和猫妈的黄），最令人心醉的是左嘴角的一块黄斑，简直。。。。丑，像极了媒婆，不知是不是察觉了自己的独特气质，正淘气的使劲往盒外爬。“哦，就他被挑剩下了哈。”“恩。”于是我们捡漏了，嘴角一抹黄的橘猫成了我跟小燕的第一只宠，经过一番口水战，起名为“小橘子”。 （二）为了迎接小橘子，我俩做足了准备，猫砂盆、水盆、饭盆、逗猫玩具、奶瓶、奶粉和一点猫粮，买了两本书，研究猫的性格，还特意打造了一个猫窝，恩，等待他来的这段时间真的挺期待、挺快乐的，觉得晚上将会有个小萌物躺在旁边，太幸福了。 可谁成想，理论终须实践来验证。 猫窝–小橘子初进家门有点紧张，脑袋没敢抬起来，耳朵后贴，摇晃着探索离他最近的沙发和茶几。他发现，小身体刚好够躺在两个沙发之间的空里，于是，这里成为了小橘子小时候第一个睡觉的地方。猫窝他是从来不带进去的，所以纯手工全球限量一个的猫窝成了摆设直到扔掉，包括后来特意给他买的的橘子屋，几乎就没见他在里头呆超过1分钟，当然这可能跟他的长势有关。 奶瓶、奶粉–1个月的瞄龄，小橘子就自觉断奶了，来我们家后，奶粉从来懒得闻两下，见到猫粮就超级兴奋，那会，脑袋跟饭盆一样大，吃起来嘎嘣嘎嘣的，可爱到爆，特别注意到，小橘子可真能吃啊~~ 第一宿—高高兴兴的关灯躺下，期期待待的小橘子也喵着想尽办法爬上了床，然后：他困的时候，躺在我俩中间，小橘子会挪位置，我俩睡姿不敢大动，害怕压着他，累；他清醒的时候会叫，会踩你身上，还有他一直有的恶心，咬人，你露哪儿，他咬你哪儿/(ㄒoㄒ)/~~。 第二宿—被折磨+1； 第三宿—几乎崩溃； 第四宿—晚上扔进了厕所，我们用耳塞对抗挠门和低嚎 几天后，彼此适应，相安无事，于是家里挺大的厕所成了小橘子的卧室。（三）小橘子骨子里带着点野性，钟爱用牙，咬断了好几根充电线（现在已经改了，对电线无爱了），咬断了1根手套带，咬断了一簇围巾下面的穗穗。。，估摸着上一辈子是吃面条噎死的吧，凡是圆柱条状的他都想上牙试试，虽然可恶，但他又毛又软啊~ 小橘子是个鉴赏家，凡是能够到的新鲜玩意，新买不久的玻璃杯、树脂的角雕、我刚拼好的高达模型。。，他都要用爪子碰碰，再碰碰，再碰碰，“咣”！“喵（假货，鉴定完毕）！！”东西便要落地听个响，你起身冲过去，他则后退一蹬跑到犄角旮旯将身藏起。虽然可恨，但他又毛又软啊~ 养猫之前，一直听说猫是个爱干净的动物，经常清理身体，食物放在猫砂盆旁边绝对不会吃，自己经常出没的地方不允许有脏东西。然而，小橘子却是个例外，猫粮可以洒到地上，饿了捡起来也吃；猫砂盆旁总有猫砂洒落，偶尔还有干了的粑粑。作为雄性动物，埋汰点没啥，可你屁股上挂着屎满屋跑这丢人的事。。唉，厉害了我的猫。虽然可恶心了，但他又毛又软啊~ 是啊，他又毛又软啊，对小橘子的气，无论多大没有一番磋磨解决不了的，有就磋磨两回。 （四）论睡眠，小橘子可能是世界上睡得最舒服的，其妖娆的睡姿显露无余，古人说，喵在最安全的地方，最信任的主人面前，才会在睡觉时采用躺姿，露出毫无保护且最柔软的腹部，小橘子则是想睡的时候万物皆可信任。 论权力欲，我只服小橘子。韩非子：“事在四方，要在中央”，当小橘子从沉睡中醒来，用过御膳，引过御酒，你的一举一动就要在尽在他的掌握之中，亦或是占领战略制高点，全家最高的书柜顶上俯瞰，亦或是走到全屋最中央的立柜上，360°监视，亦或是躲在不起眼的地方偷窥，看你干啥好事。 小橘子随我俩，“吃”情无限，各种口味猫粮，不重样，都爱吃，牛油果是最爱。各种妙鲜包、猫罐头也没给断过，往往是闻到味就开始不得劲，还没放到加餐的小盘里，脑袋已经凑过来。生鱼片、小鱼干、煮鸡蛋、八宝粥。因为小橘子属羊，所以也爱吃草，无论毛草、狗尾巴草。于是乎，小橘子的长势超过父母，超过姐妹，在一岁之前变为体重到9斤，身长大如狗。 （五）追着逗猫棒上的小羽毛奔跑的小橘子是自由的，追着激光小红点奔跑的小橘子是自由的，逗猫的时候，是很快乐的，看着他跑、看着他跳，看着他喘着粗气，你也就放松了。 自己在家的时候会感到孤单吧，不然回家开门的时候，小橘子已经在门口温柔的叫着，是跟你对起暗号，也是对我们的回家的期盼。多大的猫了，还是会踩奶，早晨一摸就会呼噜呼噜，是小橘子想要人陪了。带小橘子下楼，惊恐的眼神，然后紧紧搂着你，把脑袋贴紧了你的脖子，我知道，他就像我们的孩子。 2016年，也有努力的学习，也有加班拼搏，压抑的时候，摸一摸小橘子，就是对心灵最极致的宽慰。小橘子，一定慢慢的，慢慢的，慢慢的长啊，还想让你见证的东西太多太多，愿你喵生无忧，吾主长寿。 （附）小橘子并不是我的第一只猫，我拥有的第一只猫是从亲戚家抱来的。我记得那会刚下幼儿园，我姐带着我，瞒着我妈我爸，偷摸把他从亲戚家接回来。印象里，他的头顶有一撮黄毛，我们叫他“小黄”。只可惜，小黄不会处理自己的排泄物，这也直接导致不到半个月，小黄就被送走——谁知道，我妈是怎么踩到的呢。","tags":[{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"test_hexo+git","date":"2017-01-19T02:16:49.000Z","path":"2017/01/19/test-hexo-git/","text":"搭建博客教程预览1. node 环境下 npm install hexo -g 2. 本地文件里 hexo init 3. npm install 4. 再webstrom中打开 5. 开启服务器 hexo -s g 6. hexo new &quot;标题&quot;，建立一篇新的文章 7. hexo generate 编译 8. 在服务器地址访问自己的本地博客。 9. 远程部署： 在deploy:属性下，修改如下代码 type: git repository: https://github下存储你的博客的库链接（xxx.github.io） branch: master 10. 下载安装git支持：npm install hexo-developer-git --save 11. 推送到github ：hexo d -g 12.输入xxx.github.io访问即可","tags":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/tags/Technology/"}]}]