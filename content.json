[{"title":"如何比较两个时间大小","date":"2017-02-15T02:34:17.000Z","path":"2017/02/15/test/","text":"工作中用到date的频率非常高,如果对Date的方法不熟悉,每次用的时候都现看现学,就很忙乱了。昨天写页面时,遇到了这样的情况:一个首页的展览,如果正处在展览的时间中,比如展示从2017-02-14到2017-02-17,今天是2月15日,此时只能修改展示结束时间;如果还没开始展示,则开始时间和结束时间都能修改;第三种情况是展示已经结束,则这两个时间都不能修改;这就要求我需要比较时间从而进行判断; 关于比较两个时间的大小两个方法 1是用字符串直接比较;始于时间格式已经一致的两个时间 12&apos;2017-1-2 12:23:00&apos;&gt;&apos;2017-1-1 14:55:00&apos; true 这种直接用字符串比较的方法其实内部调用了String对象的localCompare方法;经测试,该方法可以精确比较到秒;但是受限于两个比较日期的格式必须完全一样。通过new Date获取现在的时候返回的格式如下 12new Date() Wed Feb 15 2017 11:27:36 GMT+0800 (CST) 鉴于还需要将获取的时间通过以下分解出来年月日时分秒 123456new Date().getFullYear() //年new Date().getMonth() //月 需要注意返回的范围0-11,即0对应1月new Date().getDate() //日new Date().getHours() //0-23 小时new Date().getMinutes() //0-59 分钟new Date().getSeconds() //0-59 秒 或者获取字符串格式的时间,通过str.replace(///g,’-‘)将中间的’/‘替换成’-‘; 123456new Date().toLocaleString( )//获取当前日期和时间 字符串格式&quot;2017/2/15 上午11:49:25&quot;new Date().toLocaleDateString(); //获取字符串格式日期&quot;2017/2/15&quot;new Date().toLocaleTimeString() //获取字符串格式时间&quot;上午11:51:23&quot; 想象代码不少于6行,放弃此方法; 2 利用距离1970年1月1日0点的毫秒数进行比较 获取当前时间距离标准时间的毫秒数比较简单,一行代码搞定; 1new Date().getTime() 接下来,分析那两个的时间,字符串类型,格式为’2017-1-2 12:33:00’;利用Date.parse(),参数是日期格式的字符串,函并返回该日期与 1970 年 1 月 1 日午夜之间相差的毫秒数。很多书上写日期字符串的格式必须是’mm-dd-yyyy h:m:s’,但通过测试,发现并不是,如图 ![代码](../img/cat.jpg) 所以最终通过此方法,获取毫秒数,进行对比; 12let startSec=Date.parse(record.start_time);let endSec=Date.parse(record.end_time); 先写到这,去吃饭;","tags":[{"name":"Date对象的方法","slug":"Date对象的方法","permalink":"http://yoursite.com/tags/Date对象的方法/"}]},{"title":"'NEC各种标签的写法'","date":"2017-02-14T02:17:35.000Z","path":"2017/02/14/NEC各种标签的写法/","text":"NECNEC（nice easy css）是一种规定了规范的css写法，包括遵循一定的命名/分类等规范，比如布局样式类名以.g开头，模块.m开头，功能模块用.f开头等等。同时，nec则希望通过引入代码框架更简单和统一的实现页面的基础功能。 NEC下的标签框架NEC下，所有标签可能涉及到的大众功能均作为框架，引用只需添加类名即可。规定几个常用带tab的标题头,请暂时忽略已经写好的类名，下一部分将做说明 html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;header class=\"m-hd\"&gt; &lt;h2 class=\"u-tt\"&gt;标题&lt;/h2&gt; &lt;div class=\"more\"&gt;&lt;a href=\"#\"&gt;more&amp;raquo;&lt;/a&gt;&lt;/div&gt; &lt;ul&gt; &lt;li class=\"z-crt\"&gt;&lt;a href=\"#\"&gt;默认：居左，不定宽&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;“标题”和“更多”可删&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;扩展类可以自由组合&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签标签&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/header&gt; &lt;header class=\"m-hd m-hd-bg\"&gt; &lt;h2 class=\"u-tt\"&gt;标题&lt;/h2&gt; &lt;div class=\"more\"&gt;&lt;a href=\"#\"&gt;mroe&amp;raquo;&lt;/a&gt;&lt;/div&gt; &lt;ul&gt; &lt;li class=\"z-crt\"&gt;&lt;a href=\"#\"&gt;有背景&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签标签&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; &lt;header class=\"m-hd m-hd-rt m-hd-sl\"&gt; &lt;h2 class=\"u-tt\"&gt;标题&lt;/h2&gt; &lt;div class=\"more\"&gt;&lt;a href=\"#\"&gt;more&amp;raquo;&lt;/a&gt;&lt;/div&gt; &lt;ul&gt; &lt;li class=\"z-crt\"&gt;&lt;a href=\"#\"&gt;居右，无缝&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签标签&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; &lt;header class=\"m-hd m-hd-sm\"&gt; &lt;div class=\"more\"&gt;&lt;a href=\"#\"&gt;more&amp;raquo;&lt;/a&gt;&lt;/div&gt; &lt;ul&gt; &lt;li class=\"z-crt\"&gt;&lt;a href=\"#\"&gt;较小&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签标签&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; &lt;header class=\"m-hd m-hd-rt m-hd-sm\"&gt; &lt;h2 class=\"u-tt\"&gt;标题&lt;/h2&gt; &lt;ul&gt; &lt;li class=\"z-crt\"&gt;&lt;a href=\"#\"&gt;居右，较小&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签标签&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; &lt;header class=\"m-hd m-hd-fw m-hd-ra\"&gt; &lt;div class=\"more\"&gt;&lt;a href=\"#\"&gt;more&amp;raquo;&lt;/a&gt;&lt;/div&gt; &lt;ul&gt; &lt;li class=\"z-crt\"&gt;&lt;a href=\"#\"&gt;定宽，直角&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;标签标签&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; CSS 123456789101112131415161718192021222324252627282930/*含标题的tab头，默认不定宽都*/.m-hd&#123;height: 35px;line-height: 35px;padding: 1px 0 0;border-bottom:1px solid #ddd&#125;.m-hd h2 .m-hd ul,.m-hd li&#123;float: left;&#125;.m-hd h2&#123;margin: 0 20px 0 0;font-size:16px&#125;.m-hd li&#123;position: relative;margin: -1px 0 0 2px&#125;.m-hd li:first-child&#123;margin-left: 0;&#125;.m-hd li a,.m-hd li a:hover&#123;text-decoration: none;color:#666;&#125;.m-hd li a&#123;display:block;padding:0 15px;border:1px solid #ddd;border-bottom:0;border-radius:5px 5px 0 0;text-align:center;font-size:14px;background:#f8f8f8;background:-webkit-gradient(linear,0% 0%,0% 100%,from(#fdfdfd),to(#f8f8f8));background:-webkit-linear-gradient(#fdfdfd,#f8f8f8);background:-moz-linear-gradient(#fdfdfd,#f8f8f8);background:-ms-linear-gradient(#fdfdfd,#f8f8f8);background:linear-gradient(#fdfdfd,#f8f8f8);&#125;.m-hd li a:hover&#123;background:#fff;&#125;.m-hd li.z-crt a&#123;padding-bottom:1px;margin-bottom:-1px;background:#fff;&#125;.m-hd .more&#123;float:right;margin-left:10px;&#125;/* 有背景 */.m-hd-bg&#123;padding:11px 10px 0;border-radius:5px 5px 0 0;background:#f7f7f7;&#125;/* tab无缝 */.m-hd-sl li&#123;margin-left:-1px;&#125;.m-hd-sl li a&#123;border-radius:0;&#125;.m-hd-sl li:first-child a&#123;border-top-left-radius:5px;&#125;.m-hd-sl li:last-child a&#123;border-top-right-radius:5px;&#125;/* tab居右 */.m-hd-rt h2&#123;margin-right:0;&#125;.m-hd-rt ul&#123;float:right;&#125;/* tab较小 */.m-hd-sm&#123;height:25px;line-height:25px;&#125;.m-hd-sm h2&#123;font-size:14px;&#125;.m-hd-sm li a&#123;padding:0 10px;font-size:12px;&#125;/* tab定宽 */.m-hd-fw li&#123;width:80px;&#125;.m-hd-fw li a&#123;padding:0;&#125;/* tab直角 */.m-hd-ra,.m-hd-ra li a,.m-hd-ra li:first-child a,.m-hd-ra li:last-child a&#123;border-radius:0;&#125;","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"CSS3 动画效果简要描述","date":"2017-02-10T02:55:09.000Z","path":"2017/02/10/CSS3-动画效果简要描述/","text":"其实本来想直接放我的动画库的，这里先做基础只是的奠基，H5的动画其实一直被认为有些问题，使用CSS3可以实现的动画就不用H5吧。首先需要声明的是CSS动画（animation）再IE6~9是不兼容的，怎么办，静态背景图替代之 最基本结构，你懂的123&lt;div class=\"box\"&gt; &lt;i&gt;今天吃点啥&lt;/i&gt;&lt;/div&gt; 首先写动画过程关键词keyframes,构建动画的语法是@keyframes name{ 0%{code}~100%{code}}，具体keyframes声明（注意多引擎声明），改动画效果的名字name,代码体里，从0%~100%，元素的变化过程，具体看代码123456789101112@keyframes _t &#123; 0% &#123;background: #bebebe;left: 0px;top: 0px;transform: rotate(0deg);&#125; 25% &#123;background: #464646;left: 100px;top: 0px;transform: rotate(10deg);&#125; 50% &#123;background: #d6d6d6;left: 150px;top: 0px;transform: rotate(20deg);&#125; 55% &#123;background: #fafafa;left: 200px;top: 0px;transform: rotate(40deg);&#125; 60% &#123;background: #fafafa;left: 200px;top: 50px;transform: rotate(0deg);&#125; 70% &#123;background: #d6d6d6;left: 200px;top: 100px;transform: rotate(0deg);&#125; 80% &#123;background: #464646;left: 200px;top: 50px;transform: rotate(-40deg);&#125; 95% &#123;background: #b4b4b4;left: 50px;top: 50px;transform: rotate(-360deg);&#125; 100% &#123;background: #bebebe;left: 0px;top: 0px;transform: rotate(0deg);&#125;&#125;/*剩下的@-webkit-keyframes /-o-keyframes/-moz-keyframse等省略了就*/ 简要说一下上面的代码，即刚开始的时候，元素背景色为#bebebe,定位为左上角，transform为变形，rotate（旋转）角度0deg；当动画进行到25%时，背景色变为#464646，位置水平移动100px,角度10deg.依次类推。知道100%时恢复为初始，这么一个循环过程，当然你可以设定无限个进度节点，大量的动画效果。 元素引入动画构建好动画后，为元素引入动画即可，基本语法为ele{animation: name duration timing-function delay iteration-count direction;}animation声明，当然一贯的，你同时要有私有声明-webkit-animation/-moz/-o，name就是引入的动画名，本案例为_t，duration(规定动画时长，ms计量)，timing-function（速度曲线，linear/ease-in-out等），delay（延迟执行动画时间），iteration-count（重复动画默认为1，可以为多次，infinite则表示无限循环），direction(value:normal正常播放/alternate次轮反向播放 )1234567891011121314div&#123; position: relative; width: 200px; height: 200px; line-height: 200px; background: #bebebe; text-align: center; /*引入动画_t,单轮7s执行结束，执行曲线ease-in-out，延迟2s 反复播放，次轮反向*/ -moz-animation: _t 7s ease-in-out 2s infinite alternate; -webkit-animation:_t 7s ease-in-out 2s infinite alternate; -o-animation: _t 7s ease-in-out 2s infinite alternate; animation: _t 7s ease-in-out 2s infinite alternate;&#125; 恕在下没有制作gif图，所以這里没有效果图展示。 嵌套动画动画效果可以元素嵌套，比如建立动画效果_i1@keyframes _i &#123;0% &#123;color:#fafafa&#125;25% &#123;color:red&#125;50% &#123;color: burlywood&#125;55% &#123;color:aquamarine&#125;60% &#123;color:aqua&#125;70% &#123;color: aquamarine&#125;80% &#123;color:burlywood&#125;95% &#123;color:red&#125;100% &#123;color:#fafafa&#125;&#125; 再div所含i元素中嵌套123456789i&#123; font-family: \"Microsoft YaHei\"; font-size:14px; color: #fafafa; animation: _i 7s ease-in-out 2s infinite alternate; -moz-animation: _i 7s ease-in-out 2s infinite alternate; -webkit-animation:_i 7s ease-in-out 2s infinite alternate; -o-animation: _i 7s ease-in-out 2s infinite alternate;&#125; 恕在下没有制作gif图，所以這里没有效果图展示。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"常用正则表达式","date":"2017-02-09T04:19:03.000Z","path":"2017/02/09/常用正则表达式/","text":"记录几个常用的正则表达式，备用，一直updating $ adding 匹配中文字符1234// 匹配中文字符的标准写法，肯定记不住，用的是unicode。/[\\u4e00-\\u9fa5]///同样的引申一下，匹配中文姓名的正则为/^[\\u4e00-\\u9fa5]&#123;2,4&#125;/ 值得一提的是，ES5之前的并不能完全支持unicode值，ES6中添加了u字符，使得这成为了可能 匹配双字节字符，包括中文1/[^\\x00-\\xff]/ 匹配空白行1/\\n\\s*\\r/ 匹配email地址1234//一般写法 /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$///详细大神写法，这个更加详细，?:表示不会被捕捉。/[\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/ 匹配网址urlurl比较复杂，这里只写匹配普通http协议的网址1/(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;amp;/~\\+#])?/ 匹配有效数字1/^[+-]?(\\d|([1-9]+))(\\.\\d+)?$/ 匹配国内电话1/\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\&#123;7,8&#125;/ 匹配qq1/[1-9][0-9]&#123;4,&#125;/ 身份证号1/^(\\d&#123;6&#125;)(\\d&#123;4&#125;)(\\d&#123;2&#125;)(\\d&#123;2&#125;)(\\d&#123;3&#125;)([0-9]|X)$/ 匹配年月日1/([0-9]&#123;3&#125;[1-9]|[0-9]&#123;2&#125;[1-9][0-9]&#123;1&#125;|[0-9]&#123;1&#125;[1-9][0-9]&#123;2&#125;|[1-9][0-9]&#123;3&#125;)-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))/","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"css优化原则","date":"2017-02-08T01:56:11.000Z","path":"2017/02/08/css优化原则/","text":"如何书写更加整洁的css代码，遵循几项原则： 代码重置总有人说你们写CSS的时候有点不道德，上来就把别人的默认padding/margin啥的都干掉了，等用的着的时候又贱贱的加上。去掉这些默认样式一个是为了后面的代码容易操作，另一方面也为消除不同浏览器默认样式不同的影响。一般的都会包括这么几个重置：12345678910111213141516171819202122232425262728293031323334353637383940414243444546body, h1, h2, h3, h4, h5, h6, hr, p, blockquote,dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td, img &#123; border: medium none; margin: 0; padding: 0;&#125;/** 设置默认字体 **/body, button, input, select, textarea &#123; font: 12px/1.5 &apos;宋体&apos;, tahoma, Srial, helvetica, sans-serif;&#125;h1, h2, h3, h4, h5, h6 &#123; font-size: 100%;&#125;em &#123; font-style: normal;&#125;/** 重置列表样式 **/ul, ol &#123; list-style: none;&#125;/** 重置超链接元素 **/a &#123; text-decoration: none; color: #333;&#125;a:hover &#123; text-decoration: underline; color: #F40;&#125;/** 重置图片元素 **/img &#123; border: 0px;&#125;/** 重置表格元素 **/table &#123; border-collapse: collapse; border-spacing: 0;&#125; 使用缩写缩写可以减少css文件的大小，并增加可读性和可维护性。然而并非所有值都可以缩写，浏览器读取缩写时，会将所有项都设置一遍，会消耗一定的性能。常用缩写包括：123456789101112131415/*盒子模型缩写*/div&#123; padding:10px;/*4个内边距均为10px*/ padding:10px 20px;/*上下均为10px,左右均为20px*/ padding:10px 20px 30px;/*上下分别为10/30px,左右均为20px*/&#125;/*16进制颜色*/li&#123; color: #000;/*原色#000000*/ background-color: #389;/*原色为#338899*/&#125;/*字体*/body&#123; font:italic small-caps bold 12px/1.5em &quot;宋体&quot;,sans-serif;/*至少指定size、family*/&#125; 不需要全部属性都设定时，尽量不用缩写，比如：1div&#123;margin-left:auto;margin-right:auto;&#125;/*不考虑上下边距，仅水平居中*/ 避免性能消耗属性expression表达式/filter滤镜，这两者再IE中已经得到较好的支持，但确实是个耗性能的属性，谨慎使用，除非需求要求，比如再opacity（透明度）时，兼容ie6~8必须使用filter，这时需求大于一切。 选择器合并选择器合并已经是常见的基本代码规范，再相同功能，如background采用同一张图片时，可将选择器合并，避免同一种属性反复写，默认属性重置也是这个道理。123div .first,.second,.third,.fourth&#123; background:url(../xx/xx.png) no-repeat 900px 900px; &#125; CSS做更多的事情能用CSS实现的事情，尽量避免使用js。 再不兼容低版本浏览器的情况下（移动开发），完全可以采用CSS3的动画等来实现，而不是采用js。 视觉变化，使用CSS控制className 设置多节点样式，避免使用js时的浏览器多次渲染耗性能 清晰的注释将每一个模块用注释隔开，增加可读性。哪怕是header/nav/footer这样简单的分隔。 压缩套用工具喽，比如gulp，将多余空格去除。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"居中那件不大不小的事","date":"2017-02-07T02:05:02.000Z","path":"2017/02/07/居中那件不大不小的事/","text":"元素及元素内容的水平/垂直完全居中常被作为考察前端工程师的基本技能，而这项技能目前也是再项目中较为常见的实际应用之一。 水平居中水平居中的实现相对简单，主要分为html中块级元素和内联元素的居中。 定宽块级元素首先有个div1&lt;div class=&quot;center&quot;&gt;&lt;/div&gt; div的居中，只需要设置左右margin为auto即可1234.center&#123; width:200px margin: 50px auto;&#125; 不定宽块级元素由于宽度不定，比如再响应式布局中，如果限制了margin，可能会导致不必要的误差。此时，可将通过3种方法进行居中设置（table/inline/position）还是上述div,再不设置width:200px的情况下，可进行如下3种操作 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/**利用table标签的长度自适应性，再对其进行定宽块级元素(ul/li)的margin操作*/&lt;div class=&quot;center&quot;&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;ul&gt; &lt;li&gt;小橘子&lt;/li&gt; &lt;li&gt;小橘子&lt;/li&gt; &lt;/ul&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;table&#123; marigin:0 auto;&#125;/** 更改display为inline，将父级设置为text-align:center*/&lt;div class=&quot;center&quot;&gt; &lt;ul&gt; &lt;li&gt;小橘子&lt;/li&gt; &lt;li&gt;小橘子&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;.center&#123; text-aling:center;&#125;ul&#123; display:inline;&#125;/** 通过position，父级左浮动后，左偏移50%，同时子元素则左偏移-50%。其实此方法也可为定宽元素设置居中，将子元素绝对定位，左偏移-50%，有移动宽度的一半即可。*/.center&#123; positon:relative; float:left; left:50%;&#125;ul&#123; position:relative; left:-50%;&#125; 内联元素可以再其父级添加text-align:center； 12345678&lt;div class=&quot;center&quot;&gt; &lt;span&gt;小橘子小橘子小橘子&lt;/span&gt;&lt;/div&gt;.center&#123; ...... text-align: center;&#125; 垂直居中垂直居中相对水平居中确是有点棘手，普通的当行元素，你可以通过上下padding值一样来设置居中，但这方法有挺多情况不能用，因此不推荐 单行内联元素子元素为单行不换行，且父元素高度确定，可以将父元素height和line-height设置为相等1234567891011&lt;div class=&quot;center&quot;&gt; &lt;ul&gt; &lt;li&gt;小橘子&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;.center &#123; width: 400px; height: 400px; line-height: 400px; text-align: center;&#125; 2.多行内联元素第一个方法是跟不定宽块级元素table方法居中使用相同，套table-&gt;tbody-&gt;tr-&gt;td，然后引入垂直居中vertical-align：middle,这里不作演示。另外一个是使用table-cell显示，但此方法再ie6~8不兼容123456.center &#123; width: 400px; height: 400px; display: table-cell; vertical-align: middle;/*使用table-cell以激活table-cell*/&#125; 块级元素垂直居中 123456789101112131415161718192021222324/**元素高度已知的情况下*/.center &#123; width: 400px; height: 400px; position:relative; border: 2px solid;&#125;ul&#123; height: 200px; width: 200px; position: absolute; top:50%; margin-top:-100px;/*即下降高度的一半*/&#125;/**高度未知的情况下，可以使用CSS3的transform属性*/ul&#123; 。。。。省略 transform:translateY(-50%);&#125; 同时水平和垂直居中元素存在宽度和高度，说明他已经是个块级或者伪块级了，可以使用position方法，关键代码：1234567891011.center&#123; positon:relative;&#125;ul&#123; width:200px; height:200px; positon:absolute; top:50%; left:50%; margin:-100px 0 0 -100px;&#125; 元素宽度和高度未知的情况下，引用transform也可进行水平和垂直同时居中12......省略transfrom:translate(-50%,-50%); 特殊的flex布局使用CSS3种的flex布局，进行这些居中就方便和快捷多了。目前还不能很好的兼容再所有浏览器中，引入f；flex布局需要声明浏览器，比如display:-webkit-flex，但此是趋势。flex布局较为复杂，仅介绍与居中有关的几个属性。 justify-content:内容相对于主轴的对齐方式，值包括了start(相对主轴开始对齐)/end(相对主轴结束对齐)/center(主轴中对齐，主轴为横轴则为居中，主轴为纵轴，则为垂直对齐)/space-between(两端对其)/space-around(间隔相等对齐) align-item：相对交叉轴的对齐方式，值包括了flex-start(交叉轴的起点对齐)/flex-end（交叉轴的终点对齐）/flex-center(交叉轴的中点对齐)/stretch（默认，占满）/baseline（第一行文字基线对齐）","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"再网上看到的，试着敲了一遍，弥补我不堪的css","date":"2017-02-06T01:52:04.000Z","path":"2017/02/06/再网上看到的，试着敲了一遍，弥补我不堪的css/","text":"Css底子不行，看人家用css搭建了一个macBook，甚是不错，模仿敲了一遍。首先有些图标并没有添加，只做到大概和基本键位，其次并没有实现键位的功能，日后如果有时间，还可添加笔记本盖打开的效果。实现仅用HTML和CSS/CSS3,其中使用了伪类及CSS3的选择器nth-Child,整体代码没有难度。 结构1234567891011121314&lt;body&gt;&lt;!--平板--&gt;&lt;div class=&quot;board&quot;&gt; &lt;!--macBar--&gt; &lt;div class=&quot;bar&quot;&gt;&lt;/div&gt; &lt;!--键盘--&gt; &lt;div class=&quot;keyboard&quot;&gt; &lt;!--按键--&gt; &lt;ul&gt;&lt;/ul&gt; &lt;/div&gt; &lt;!--触摸区--&gt; &lt;div class=&quot;touch&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt; 添加按键12345678910&lt;ul&gt; ....省略 &lt;li&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;Q&lt;/li&gt; ....省略 &lt;/ul&gt; 多个span嵌套表示某个有两个值的按键。 board 的实现1234567891011.board&#123; margin: 50px auto; padding: 0 auto; height: 450px; width: 600px; background: #D2D2D2; border-radius: 20px; position: relative; box-shadow: 0px 5px 6px rgb(160,160,160); background: -webkit-linear-gradient(60deg,#fafafa 25%,#d2d2d2);/*不考虑ie6~9兼容*/&#125; 电脑盖用伪类进行设置.123456789101112131415161718.board:before&#123; content: &quot;&quot;; width:780px; height: 20px; display: block; background:#d2d2d2; position: absolute; top:-20px; left:-90px; /** 上面左右两个大圆角，下面两个小圆角 */ border-radius: 0 0 3px 3px; border-top-left-radius: 390px 18px; border-top-right-radius: 390px 18px; border-bottom: 2px solid ; background: -webkit-linear-gradient(top,#d2d2d2 50%,#fafafa)&#125; bar盖和主机的链接部分123456789101112131415&#125;.board .bar&#123; width: 450px; height: 20px; position: absolute; left:75px; top:2px; border-radius: 2px; /** 留空白，更像那么回事 */ border: 2px solid #fff; border-top: 0; background:-webkit-linear-gradient(top,rgb(30,30,30) ,rgb(60,60,60) 35%,rgb(100,100,100) 50%,rgb(30,30,30) 65%);&#125; 键盘绘制键盘区,就是画个框子1234567891011121314151617.board .keyboard&#123; position: absolute; left:35px; top:35px; width: 530px; height: 216px; border:1px solid #b4b4b4; border-radius: 8px; background: #fafafa; /** 阴影增加立体感，分分钟3d起来 */ box-shadow:2px 0px 2px #b4b4b4 inset, 0px 3px 3px #b4b4b4 inset, -2px -0px 1px #b4b4b4 inset, 0px -3px 3px #b4b4b4 inset;&#125; 按键1 对按键做统一格式安排如下：1234567891011121314151617181920212223242526272829303132333435363738ul,li&#123; list-style: none; padding: 0 auto; margin: 0 auto; display: block; font-family: Verdana; cursor: pointer; /** 按键处理为文本不可选择 */ -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;&#125;ul&#123; width:530px; margin-top:8px; padding-left: 8px;&#125;li&#123; width: 29px; height: 29px; line-height: 29px; float:left; margin-right: 5px; margin-bottom: 5px; color: #fff; background: #000; text-align: center; font-size:12px; border: 1px solid #464646; border-radius: 4px; box-shadow: 1px 0px 0px #000, 0px 1px 0px #000, -1px 0px 0px #000, 0px -1px 0px #000;&#125; 2 对第一排的功能按键进行大小调整1234567/**利用nth-Child选择器,选择前14个功能键 */li:nth-child(-n+14) &#123; width: 30px; height: 15px;&#125; 3 拥有换挡多功能的按键123456789/**拥有换挡功能的键 */li:nth-child(-n+27):nth-child(n+16) span,li:nth-child(40) span,li:nth-child(41) span,li:nth-child(42) span,li:nth-child(53) span,li:nth-child(54) span,li:nth-child(-n+66):nth-child(n+64) span&#123; display: block; margin-top: 5px; line-height: 0.7;&#125; 4 方向键123456789101112131415li:nth-child(75),li:nth-child(77),li:nth-child(78)&#123; margin-top: 18px; height: 14px;&#125;li:nth-child(76)&#123; height: 13px; margin-top: 19px;&#125;li:nth-child(78)&#123; position: absolute; bottom: 22px; right:38px;&#125; 5 其他乱七八糟大小的键,只需要调整宽度即可1234567891011121314151617181920212223li:nth-child(28), li:nth-child(29) &#123; width: 45px;&#125;li:nth-child(43), li:nth-child(55) &#123; width: 55px;&#125;li:nth-child(56), li:nth-child(67) &#123; width: 73px;&#125;li:nth-child(-n+74):nth-child(n+68) &#123; height: 33px;&#125;li:nth-child(72) &#123; width: 173px;&#125;li:nth-child(71), li:nth-child(73) &#123; width: 37px;&#125; 最后，将touch区放上12345678910.touch&#123; position: absolute; width: 200px; height: 150px; border:2px solid #bebebe; bottom:23px; left:200px; border-radius: 8px; background: #d6d6d6;&#125; ok了，最终图如下","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"Brave曝安全问题？如今浏览器市场啥样子了","date":"2017-01-31T08:41:41.000Z","path":"2017/01/31/Brave曝安全问题？如今浏览器市场啥样子了/","text":"近日，自发布以来就备受关注和青睐的Brave浏览器，被曝出存在安全问题漏洞——攻击者可以通过利用该漏洞伪造网页进行欺骗，一旦用户点击访问，将可能出现个人相关信息的泄露，同时攻击者还可再虚拟页面实施木马植入和钓鱼等行为。这对一直以广告拦截、防cookie及像素追踪等安全性特点而著称的Brave造成一定的负面影响。不过，最早曝出该问题的地点是在Brave开发人员再Hackerone平台上设立的安全问题有奖征集项目，该项目本身就在于鼓励广大网络安全工作相关人员参与到Brave安全性能提升中，这也是Brave作为开源软件，不断进化的必要措施。 Brave据悉，Brave由JavaScript创建者兼Mozilla联合创始人Brendan Eich成立的Brave Software公司于2016年初发布。特色为能够屏蔽程序化广告，并换成自家的“广告库”，以快速呈现网站，这样可阻止所有第三方追踪的cookies、所有的指纹识别技术以及所有试图注入广告的脚本，兼具快速与安全。目前，该浏览器已经推出了面向Mac、Windows、iOS和Android四大平台的版本。该浏览器其实基于开源的Chromium打造，并且用到了GitHub Atom文本编辑器中的Electron工具。 助推了Chrome上述不可忽视的一点，无论Brave如何好，其仍然是基于Chromium的，也就是说其实Brave的流行从侧面给Chromium好好的宣传了一把。Chromium在架构上使用了Apple发展出来的WebKit排版引擎、Safari的部份源代码与Firefox的成果，并采用Google自家的V8引擎，提升解译JavaScript的效率，同时设计“沙盒”、“黑名单”、“无痕浏览”等功能来实现稳定与安全的网页浏览环境。Chromium开放源代码，借助Google Developer以及其他开发者的力量，Chromium的版本更新速度甚至可以快到没几个小时就有新版本，不过Chromium意在作为Chrome浏览器的实验版或者工程版，因此只有成熟的Chromium技术才会搬到Chrome上使用。从百度统计的国内浏览器市场份额来看，Chromium的不断进化和提升为Chrome的市场推进提供了强大的力量，Opera的PC版以及Mozilla的Brave,都是基于开源的Chromium。“兼容头疼的”IE8总份额从15年的36%减少到16年底的14.2%,Chrome则超过40.52%,搜狗,猎豹,QQ等其他Chromium内核浏览器则也还有近10%的市场份额.不过IE7和IE10总共还有5%左右，IE6+IE7还有Edge已经被列入其他，不单独计数。偏向IE特性的360目前也退出了主流（得，现在打开360已经有不兼容某些显示了）。","tags":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/tags/Technology/"}]},{"title":"console的几个命令（二）","date":"2017-01-30T12:15:32.000Z","path":"2017/01/30/console的几个命令（二）/","text":"console–控制台只要你会写代码，即使像前米总统奥巴马一样只会打印个‘hello world’，也说明你会使用控制台了。对于浏览器自带的控制台，则是调试前端代码的必备工具之一。console的各种命令，为程序猿们调试代码提供了方便，有那么几个命令总是很常用，有那么几个命令用起来挺装x。 装x的命令 判断变量是否为真console.assert()，判断一个表达式或变量是否为真。若为否，则在控制台输出一条相应信息并抛出异常。 chrome: Edge: FireFox: 追踪函数的调用轨迹console.trace(),几个命令都是见名知意，trace命令其实在调试中挺好用 chrome: Edge: FireFox: 利用计时器查看代码运行时间console.time()/console.timeEnd(),代表计时开始和计时结束。 chrome: Edge: FireFox: 控制台性能分析console.profile()/console.profileEnd(),可在控制台打印各个阶段执行代码时的性能分析，有点意思,但浏览器对该方法的支持不好，IE包括Edge均已经抛弃了该方法，因为不使用profile,浏览器本身就有性能分析界面","tags":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/tags/Technology/"}]},{"title":"console的几个命令（一）","date":"2017-01-30T10:41:50.000Z","path":"2017/01/30/console的几个命令/","text":"console–控制台只要你会写代码，即使像前米总统奥巴马一样只会打印个‘hello world’，也说明你会使用控制台了。对于浏览器自带的控制台，则是调试前端代码的必备工具之一。console的各种命令，为程序猿们调试代码提供了方便，有那么几个命令总是很常用，有那么几个命令用起来挺装x。 几个常用的命令 console.log这可能是目前最常用的命令了，原来这是安装了firebug的firefox浏览器的专利，目前浏览器都可以使用了 chrome: Edge: FireFox: console.info/error/warm这几个命令有时会用的，分别显示信息/报错/警告chrome: Edge: FireFox: console.dir输出对象的详细信息 chrome: Edge: FireFox的dir的显示真的大方好看: 装x的命令 占位符console的几个命令支持像c中的printf的占位符，比如： chrome: Edge: FireFox: 信息分组显示console.group这个命令还是挺不错的，分组显示信息，像本人这种特别顾及格式的人特别喜欢 chrome: Edge:第二个分组会呈现为分组1的子分组，这个不大合理 FireFox:","tags":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/tags/Technology/"}]},{"title":"css左边竖条实现方法","date":"2017-01-29T00:57:05.000Z","path":"2017/01/29/css左边竖条实现方法/","text":"css中左边条是一个常见且常用的样式，比如： 首先得有个盒子12345678&lt;div&gt;&lt;/div&gt;//样式div&#123; width: 500px; height:100px; margin: 400px auto; background-color: #6e8095;&#125; 这样子就是一个灰色的大盒子，其他啥也木有 border-left这应该是最常用的加左边框的样式了1234div&#123; border-left: 5px solid deeppink; box-sizing: border-box;//边框创建再元素里面&#125; 伪类使用after或者before,也可以轻松实现此功能，伪类涉及到定位，再div样式中加入position属性12345678910111213div&#123; ....... position:relative;&#125;div:after&#123; content: &quot;&quot;; width: 5px; height: 100px; position: absolute; top:0; left: 0; background-color: deeppink;&#125; box-shadow使用盒阴影一般都是给盒子增加阴影呈现立体效果，参数包括水平/竖直阴影位置、模糊距离、阴影尺寸、颜色、修改位内阴影等。可以采用两种方式：12345678910//外阴影会影响margindiv&#123; ....... box-shadow: -5px 0px 0 0 deeppink;&#125;//内阴影div&#123; ...... box-shadow: inset 5px 0px 0 0 deeppink;&#125; drop-shadowcss3新特性，filter滤镜中的一个，用于生成阴影1234div&#123; ..... filter:drop-shadow(-5px 0 0 deeppink)&#125; linearGradientcss3新特性，线性渐变1234div&#123; ...... background-image:linearGradient(90deg,deeppink 0px,deepink 5px, transparent 5px);&#125; outlineoutline——轮廓，绘制元素周边的线，突出元素的作用，效率较低，尽量别选123456789101112div&#123; outline:5px solid deeppink;&#125;div&#123; position:absolute; content:&quot;&quot;; top:-5px; bottom:-5px; right:-5px; left:0; background:#ddd;&#125; scrollbar滚动条的样式可以吗？可以，来个大大的滚动条。123456789div&#123; width:505px; background:deeppink; overflow-y:scroll;&#125;div::-webkit-scrollbar&#123; width:500px; background-color:#ddd;&#125;","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"new 都干了些啥","date":"2017-01-28T02:35:50.000Z","path":"2017/01/28/new-都干了些啥/","text":"让人开心的‘new’new 是一个非常不错的词，3个字母，不长却代表着美好，比如1234happy new yeartake on my new clothes/shirt/shoes etc.My girlfriend never buy anything new ！！。。。。 逢年过节，七大姑八大姨问：你有对象了吗。答：我工作的时候经常有新对象（var xx = new Object()）; Js 的 new 都干了啥那 执行new Object()时，浏览器引擎再幕后都默默作了什么呢。1var son = new Child(&apos;son&apos;); （1） 简单来说，短短的代码（1）中，new 大概作了这么几件事情。1234567891011//创建一个空对象var obj = &#123;&#125;;//把obj的私有属性__proto__ 指向Child的原型prototype，建立obj对象的原型链：obj=&gt;Child.prototype=&gt;Object.prototype=&gt;null,使obj可以使用原型链上的方法obj.__proto__ = Child.prototype;//调用call(),将obj替换Child类中的this,并传入&apos;son&apos;参数，执行父类Child,相当于赋值私有属性，obj拥有了Child私有属性和name = &apos;son&apos;的属性，并将其赋值给resultvar result = Child.call(obj,&quot;son&quot;);//判断result 的类型，如果不符合条件（非对象或者与obj不同），就返回obj，否则返回result。return typeof result === &apos;obj&apos;? result : obj; son其实就是result，实例化成功。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"ES6数组扩展","date":"2017-01-26T02:20:07.000Z","path":"2017/01/26/ES6数组扩展/","text":"ES5中几个常用的数组方法 增： 12push(item1,item2,item3...),数组末尾增加项;参数为多个添加项;返回添加后的数组长度；原数组改变unshift(item1,item2,item3..),数组开头增加项；参数为多个添加项；返回添加后的数组长度；原数组改变 删 12pop(),删除数组末尾一项；无参数；返回删除项，其数据类型为删除项对应的数据类型；原数组改变shift(),删除数组起始项；无参数；返回删除项，其数据类型为删除项对应的数据类型；原数组改变 改 1234splice(index,howMany,item1,item2....),从index开始删除howMany项，并用item1,item2开始替换掉删除的项；返回值为被删除的数组concat(),参数为拼接数组,返回修改后的数组，原数组改变reverse();翻转原数组，数组改变,返回数组sort();从小到大排，数组改变：ary.sort(function(a,b)&#123;return a-b;Or return b-a;&#125;)，返回改后的数组 查 123456789//查看全部数组toString(),将数组转为字符串，以逗号分隔john(),参数为分隔符，返回字符串---结合eval(),将字符串作为js代码执行，实现数学运算forEach(function(item,index)&#123;log(a),属性值；log(b),索引&#125;),遍历数组，没有返回值map()，遍历数组，有返回值//查看一部分slice(n,m),从n开始找到m,(n,m],负值截取并返回该数组。//点查看indexOf(),从前往后找/lastIndexOf(),从后往前找，IE不兼容，可以转为字符串后再执行indexOf； ES6数组方法扩展 改 1234fill(item，start,end),用item来填充数组中的值，方便用于数组的初始化，单一参数时表示全部替换，同slice()类似，可以接受第二个第三个参数，不同的是，后面表示替换从何开始,从何结束。 [1,1,1].fill(7,1,2)=&gt;[1,7,2]copyWithin(target,start,end),见名知意，复制数组中的元素[start,end)从target开始复制替换 [1,2,3,4,5].copyWithin(0,3,4)=&gt;[4,2,3,4,5] 查 12345678910//查看全部entries()/keys()/values(),用于ES6的数组遍历，均返回遍历器对象，可用for..of循环遍历，区别entries遍历键值对，keys遍历键，values遍历值。 for(let index/elem/[index,elem] of [&apos;a&apos;,&apos;b&apos;].keys()/.values()/.entries())&#123; console.log(index/elem/(index,elem)) &#125;//点查看find()/findindex(),均为找出第一个符合条件的数组成员，参数为回掉函数，所有数组成员依次执行，找出返回true,区别在于,没有满足函数的数组成员时，find()将返回undefinde，findindex()将返回-1; [1,3,4,5,-2].find(function(value,index,arr)&#123; return value &lt;0; &#125;)=&gt;-2 Array类的两个扩展方法 1234567Array.from()，将对象转为真正的数组，类数组何迭代对象均可使用。 let arrayLike = &#123;&apos;0&apos;,&apos;a&apos;,&apos;1&apos;:&apos;b&apos;&#125;; let arr = Array.from(arrayLike);=&gt;[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];Array.of(),将一组值转换为数组，其主要为弥补Array()构造时，再参数不足2位默认位数组长度的不足， Array(3)=&gt;[, , ,] Array.of(3)=&gt;[3];","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"js的继承","date":"2017-01-25T02:07:40.000Z","path":"2017/01/25/js的继承/","text":"先要有那么一个父类12345678910function Dad (x,y)&#123; this.x = 100; this.y = 200; this.sleep = function()&#123; console.log(&apos;zzzzzz&apos;); &#125;&#125;Dad.prototype.eat = function(food)&#123; return &apos;I am eating&apos;+food;&#125; 一. ES5下可以这么多的继承原型链继承将父类的实例作为子类的原型，较为简单，但无法实现多继承，子类实例化时，无法向父类的构造函数传值。1234567function Child()&#123;&#125;Child.prototype = new Dad();Child.prototype.constructor = Child;//构造函数指向自己而不是默认的指向父类，避免继承紊乱Child.protoytpe.name = &apos;Son&apos;;//实例var son = new Child(); 构造继承使用父类的构造函数来增强子类，等同复制父类实例属性给子类,引入call()方法.这个方法可以实现多继承，但无法继承父类的实例属性和方法，无法复用。 12345678function Child(x,y,name)&#123; Dad.call(this); this.name = name; &#125;Child.prototype.constructor = Child;//实例var son = new Child(son); 实例继承这个比较有意思，为父类添加新特性，作为子类实例返回。不限制调用方法，但是不支持多继承1234567function Child(name)&#123; var instance = new Dad(); instance.name = name; return instance;&#125;//实例var son = new Child(son); 拷贝继承即通过for in循环，将父类属性枚举并拷贝，但该方法无法获取父类不可枚举的方法,且太耗性能，基本不推荐123456789function Child(name)&#123; var dad = new Dad(); for (var key in dad)&#123; Child.protoytpe[key] = dad[key]; &#125; Child.prototype.name = name;&#125;//实例var son = new Child(son); 组合继承（常用方法）调用父类构造，继承父类属性，父类实例作为子类原型，可复用，可传参，但调用了两次父类构造函数，内存会消耗一点。12345678function Child(name)&#123; Dad.call(this); this.name = name;&#125;Child.prototype = new Dad();Child.prototype.constructor = Child;//实例var son = new Child(son); 寄生寄生的形式，砍掉父类的实例属性，节省了组合继承的内存消耗问题，但实现较为复杂。1234567891011function Child(name)&#123; Dad.call(this); this.name = name;&#125;(function()&#123; var Super = function()&#123;&#125; Super.prototype = Dad.prototype; Child.prototype = new Super();&#125;)() Super = null;//节省内存 var son = new Child(son); proto属性继承由于proto属性浏览器不兼容，该继承可以再移动端开发的时候使用。比较容易.1234567function Child(name)&#123; this.name = name; Dad.call(this); &#125;//实例var son = new Child(&apos;son&apos;);son.__proto__ = Dad.prototype; 一. ES6下可以这样的继承ES5的继承实质上是先创造子类的实例对象this,然后将父类的方法添加到子类this上，但是由于ES6的继承机制不同，是先创造父类的实例this,然后用子类的构造修改this. extends 关键词继承ES6将使用关键词extends，熟悉java编程的应该不陌生，对ES6的样子很像java.Child extends Dad&#123;12345678910 constructor(x,y,name)&#123;//直接给一个construor方法作为构造方法 super(x,y);//父类的构造函数，只有调用super方法才能使用this,因为子类没有自己的this.换句话说，this必须再super方法调用之后使用 this.name = name; &#125; eat()&#123; return this.name+super.eat(); &#125;&#125;//实例let son = new Child(son); proto继承ES6可以直接再定义对象时直接通过属性进行继承1son = &#123;__proto__:Dad&#125;;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"ES6箭头函数需要注意的地方","date":"2017-01-24T08:32:31.000Z","path":"2017/01/24/ES6箭头函数需要注意的地方/","text":"箭头函数ECMAScript6允许使用箭头（=&gt;）来定义函数，大大减少代码量的同时，提高了不少代码的可读性，逼格也上升了一个档次。像这样：12345let fn = (a,b) =&gt;a+b;//等同于let fn = function(a,b)&#123; return a+b;&#125; 但古语云：‘函数无完函数’，箭头函数再使用时有几个需要注意的地方，自己用的时候要注意。 大括号的解释问题函数体代码多了就用他，显示写法，像这样：1234let fn3 = (a,b)=&gt;&#123; a = a + b; console.log(&apos;ss&apos;);&#125; 当返回是个大括号对象，再箭头右侧时会被解释为代码块，怎么办？此时需要再对象外面加上括号，像这样：1let fn3 = (a,b)=&gt;(&#123;userName:userName,passWord:passWord&#125;) 箭头函数的this1.箭头函数中的this为定义时所在的对象，非使用时所在的对象。比如:123456789function fn() &#123; return () =&gt; &#123; return () =&gt;&#123; return () =&gt;&#123; return this.id &#125; &#125; &#125;&#125; 上述内层函数多个return ,但都采用了箭头函数的形式，因此this均为定义时所再的fn这个this2.不可进行this的指向改变因为箭头函数根本没有自己的this，也就别指望通过call()/apply()/bind()等方法去改变this了。3.for循环绑定事件绑定事件中循环为每个相关元素事件，使用ES6的let时,使用箭头函数就不要使用this，此时的this为时间函数定义时的window全局。123456789ele.onClick = function ()&#123; for(let i = 0;i&lt;xx.length;i++)&#123; this.className = &apos;我是这个元素&apos;;//this为ele &#125; &#125; ele.onClick =&gt;&#123; for(let i = 0;i&lt;xx.length;i++)&#123; this.className = &apos;我是这个元素&apos;;//this为window &#125; 不可作为构造函数即父类不能采用箭头函数作为constructor,浏览器会友善的告诉你，erro~~ 不可采用arguments可以采用…arr，即rest参数（获取多余参数，放入数组），ES6中不存在arguments,比如： 1234567function fn()&#123; setTimeout(()=&gt;&#123; console.log(arguments); &#125;,100);&#125;//传参给fnfn(1.2.3); 上述最后打印出的arguments为fn 的arguments。 箭头套箭头上述也有，ES6中的箭头函数，可以嵌套的。上面也有用过。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"浏览器现用js引擎","date":"2017-01-23T14:49:48.000Z","path":"2017/01/23/浏览器现用js引擎/","text":"对于个浏览器现用的js的加载引擎，作简单的罗列。v8目前，采用v8引擎的浏览器Chrome,同时Node.js/Io.js/TrifleJS的运行环境也采用了v8。1V8是一个由丹麦Google开发的开源java script引擎，V8在执行之前将java script编译成了机器码的，而非字节码或是直译它，以此提升效能。更进一步，使用了如内联缓存（inline caching）等方法来提高性能。有了这些功能，java script程序与V8引擎的速度媲美二进制编译。 SpidermonkeyMozilla开发当然由其自己使用12345678SpiderMonkey是Mozilla项目的一部分，是一个用C语言实现的JavaScript脚本引擎，另外还有一个叫做Rhino的Java版本。为了在SpiderMonkey中运行JavaScript代码，应用程序必须有三个要素：JSRuntime，JSContext和全局对象。JSRuntime，为其中的JavaScript变量、对象、脚本和应用程序中使用的上下文分配空间。每个JSContext和脚本中的每个对象都生活在一个 JSRuntime中。他们不能转移到其他运行时上或在与其它运行时共享。一般来说大多数应用程序只需要一个运行时环境。上下文JSContext，就像是一台小机器，它涉及JavaScript代码和对象的很多东西。它可以编译和执行脚本、获取和设置对象属性、调用 JavaScript函数、一种类型转换为另一种JavaScript数据、创建对象，等等。几乎所有JSAPI函数都要一个JSContext*作为其第一个参数，就像&lt;stdio.h&gt;中的大多数函数都需要FILE*一样.全局对象包含所有可以在JavaScript代码中使用的类、函数和变量。 RhinoRhino目前再HTMLUnit——一款开源的java页面分析工具，可模拟浏览器运行。 1Rhino是一种使用 Java 语言编写的 JavaScript 的开源实现，原先由Mozilla开发，现在被集成进入JDK 6.0。与其他很多语言一样，Rhino 是一种动态类型的、基于对象的脚本语言，它可以简单地访问各种 Java 类库。 JavaScriptCoreJavaScriptCore，苹果浏览器safari使用的引擎。1是webkit的一个重要组成部分，主要是对JS进行解析和提供执行环境。代码开源。iOS7后苹果在iPhone平台推出，方便了对js的操作。使得脱离webview直接运行js成为可能。 ChakraIE和Edge的引擎，先默念三遍‘微软大法好~’，因为，windows官网目前开源了其核心部分，并号称Chakra 在运行速度和对 ES6 的支持上都将是业界领先的。123其核心为CharkraCore,ChakraCore 支持 x86/x64/ARM 架构 JavaScript 的Just-in-time (JIT) 编译，垃圾收集和大量的最新 JavaScript 特性。ChakraCore 还支持 JavaScript Runtime (JSRT) APIs，允许用户简单嵌入 ChakraCore 到应用中。ChakraCore 是一个功能完整的、独立的 JavaScript 虚拟机，可嵌入到衍生产品中，驱动需要脚本功能的产品如 NoSQL 数据库、生产力工具和游戏引擎。ChakraCore 现阶段只支持 Windows，但微软表示将类似 .NET 开源项目加入跨平台支持。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"ES6新手使用指南","date":"2017-01-21T08:31:38.000Z","path":"2017/01/21/ES6新手使用指南/","text":"表达式写法：123let fn0 = ()=&gt; console.log(&apos;xxxx&apos;);let fn = a=&gt;a;//箭头函数let fn1 = (a,b)=&gt;console.log(a+b); 函数体的写法：函数体代码多了就用他呗，显示写法123let fn3 = ()=&gt;&#123; console.log(&apos;ss&apos;);&#125; 实例化和继承es5写法123456789101112 function Fn() &#123; this.name = &apos;cat&apos;; &#125; Fn.prototype.getX = function () &#123; console.log(this.x); &#125; var fn = new Fn();//继承 var s = function () &#123; &#125; s.prototype = new Fn(); es6写法123456789101112131415161718192021 class Fn&#123; constructor()&#123; this.x = 100; this.y = 100; &#125; //es6中constructor外的都为公有 getX()&#123; alert(this.x); &#125; &#125; var f = new Fn(1);//Es6中的继承，像极了java class s extends Fn&#123; ``super()要写，因为没他不行`` constructor()&#123;super();this.z = &apos;memeda&apos;;&#125; happy()&#123; alert(&apos;happy&apos;); &#125; &#125; 对象字面量作用1：写法简化：123456789//文艺青年之普通写法 var a =1,b=2; var obj=&#123; a:a,b:b &#125;//es6写法 let a =1,b=2; let obj = &#123;a,b&#125;; 作用2：牛x之处在于es6可以方便继承啊！再原型属性中添加要继承的，这样可以直接继承。1let obj1 = &#123;__proto__:obj&#125;; 模板字符串 123//显然es6再字符串拼接时可以使用``再里面进行类似jquery的选择器进行拼接var str = &apos;lisong&apos;;var str2 = `lala,$&#123;str&#125;`; 解构赋值，主要用于react native,作用为将复杂框架对象中需要的组件引入后付给对象. 12345var obj = &#123;a:10,b:11,fn:function () &#123;&#125;&#125;var obj2 = &#123;a:9,b:12,fn:function () &#123;&#125;&#125;var obj3 =&#123;aa:obj,bb:obj2 &#125;;var &#123;aa,bb&#125; = obj3;//解构，对象略复杂了,将obj3解构赋值给简单的对象alert(aa.a); 默认赋值,任意赋值,扩展运算符 12345678910111213//默认参数function sum(a=3,b=4) &#123; console.log(a+b);//此时调用sum(),没实参，则走默认参数，弹出7&#125;//参数不确定,使用...+arr，可以直接用了。function sum(a,b,...ary) &#123; console.log(...ary);&#125;//扩展运算符,有点像concatvar ary = [1,2,3,4];var ary1 = [...ary,3,3];//此时已经将ary放在了ary1里面 let const let:不能进行预解释，会形成块级作用域，块级作用域中的this就会变为上级作用域的this const:不能进行预解释，无法二次赋值123for(let i = 0;i&lt;xx.length;i++)&#123;//此时再循环中就会形成一个块级作用域，每一次i就会单独作为作用域参数使用。&#125;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"脑图：css3的一些新特性","date":"2017-01-21T06:59:13.000Z","path":"2017/01/21/css的一些新特性脑图汇总/","text":"看书并总结了一些css3的新特性，并没有以博客的形式展现，而是直接使用了百度脑图，脉络更加清晰一些，也方便记忆，但是百度脑图不能很好的支持移动端浏览器，会出现错误，比如某些属性的备注再移动端无法显示，那就显得有点干巴巴了。新鲜货，欢迎品尝~ css3的一些新特性的脑图链接，可戳此.缩略图如下：","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"一年喵生","date":"2017-01-20T10:19:07.000Z","path":"2017/01/20/一年喵生/","text":"(一)第一次看见他，是他出生后不到半个月。在一个纸盒里有4只小小的猫，其中3只长得像极夏目友人帐的猫咪老师，这3只紧紧萌在一起，煞是可爱。另外一只有一身黄白相间的斑纹（遗传了猫爸的白和猫妈的黄），最令人心醉的是左嘴角的一块黄斑，简直。。。。丑，像极了媒婆，不知是不是察觉了自己的独特气质，正淘气的使劲往盒外爬。“哦，就他被挑剩下了哈。”“恩。”于是我们捡漏了，嘴角一抹黄的橘猫成了我跟小燕的第一只宠，经过一番口水战，起名为“小橘子”。 （二）为了迎接小橘子，我俩做足了准备，猫砂盆、水盆、饭盆、逗猫玩具、奶瓶、奶粉和一点猫粮，买了两本书，研究猫的性格，还特意打造了一个猫窝，恩，等待他来的这段时间真的挺期待、挺快乐的，觉得晚上将会有个小萌物躺在旁边，太幸福了。 可谁成想，理论终须实践来验证。 猫窝–小橘子初进家门有点紧张，脑袋没敢抬起来，耳朵后贴，摇晃着探索离他最近的沙发和茶几。他发现，小身体刚好够躺在两个沙发之间的空里，于是，这里成为了小橘子小时候第一个睡觉的地方。猫窝他是从来不带进去的，所以纯手工全球限量一个的猫窝成了摆设直到扔掉，包括后来特意给他买的的橘子屋，几乎就没见他在里头呆超过1分钟，当然这可能跟他的长势有关。 奶瓶、奶粉–1个月的瞄龄，小橘子就自觉断奶了，来我们家后，奶粉从来懒得闻两下，见到猫粮就超级兴奋，那会，脑袋跟饭盆一样大，吃起来嘎嘣嘎嘣的，可爱到爆，特别注意到，小橘子可真能吃啊~~ 第一宿—高高兴兴的关灯躺下，期期待待的小橘子也喵着想尽办法爬上了床，然后：他困的时候，躺在我俩中间，小橘子会挪位置，我俩睡姿不敢大动，害怕压着他，累；他清醒的时候会叫，会踩你身上，还有他一直有的恶心，咬人，你露哪儿，他咬你哪儿/(ㄒoㄒ)/~~。 第二宿—被折磨+1； 第三宿—几乎崩溃； 第四宿—晚上扔进了厕所，我们用耳塞对抗挠门和低嚎 几天后，彼此适应，相安无事，于是家里挺大的厕所成了小橘子的卧室。（三）小橘子骨子里带着点野性，钟爱用牙，咬断了好几根充电线（现在已经改了，对电线无爱了），咬断了1根手套带，咬断了一簇围巾下面的穗穗。。，估摸着上一辈子是吃面条噎死的吧，凡是圆柱条状的他都想上牙试试，虽然可恶，但他又毛又软啊~ 小橘子是个鉴赏家，凡是能够到的新鲜玩意，新买不久的玻璃杯、树脂的角雕、我刚拼好的高达模型。。，他都要用爪子碰碰，再碰碰，再碰碰，“咣”！“喵（假货，鉴定完毕）！！”东西便要落地听个响，你起身冲过去，他则后退一蹬跑到犄角旮旯将身藏起。虽然可恨，但他又毛又软啊~ 养猫之前，一直听说猫是个爱干净的动物，经常清理身体，食物放在猫砂盆旁边绝对不会吃，自己经常出没的地方不允许有脏东西。然而，小橘子却是个例外，猫粮可以洒到地上，饿了捡起来也吃；猫砂盆旁总有猫砂洒落，偶尔还有干了的粑粑。作为雄性动物，埋汰点没啥，可你屁股上挂着屎满屋跑这丢人的事。。唉，厉害了我的猫。虽然可恶心了，但他又毛又软啊~ 是啊，他又毛又软啊，对小橘子的气，无论多大没有一番磋磨解决不了的，有就磋磨两回。 （四）论睡眠，小橘子可能是世界上睡得最舒服的，其妖娆的睡姿显露无余，古人说，喵在最安全的地方，最信任的主人面前，才会在睡觉时采用躺姿，露出毫无保护且最柔软的腹部，小橘子则是想睡的时候万物皆可信任。 论权力欲，我只服小橘子。韩非子：“事在四方，要在中央”，当小橘子从沉睡中醒来，用过御膳，引过御酒，你的一举一动就要在尽在他的掌握之中，亦或是占领战略制高点，全家最高的书柜顶上俯瞰，亦或是走到全屋最中央的立柜上，360°监视，亦或是躲在不起眼的地方偷窥，看你干啥好事。 小橘子随我俩，“吃”情无限，各种口味猫粮，不重样，都爱吃，牛油果是最爱。各种妙鲜包、猫罐头也没给断过，往往是闻到味就开始不得劲，还没放到加餐的小盘里，脑袋已经凑过来。生鱼片、小鱼干、煮鸡蛋、八宝粥。因为小橘子属羊，所以也爱吃草，无论毛草、狗尾巴草。于是乎，小橘子的长势超过父母，超过姐妹，在一岁之前变为体重到9斤，身长大如狗。 （五）追着逗猫棒上的小羽毛奔跑的小橘子是自由的，追着激光小红点奔跑的小橘子是自由的，逗猫的时候，是很快乐的，看着他跑、看着他跳，看着他喘着粗气，你也就放松了。 自己在家的时候会感到孤单吧，不然回家开门的时候，小橘子已经在门口温柔的叫着，是跟你对起暗号，也是对我们的回家的期盼。多大的猫了，还是会踩奶，早晨一摸就会呼噜呼噜，是小橘子想要人陪了。带小橘子下楼，惊恐的眼神，然后紧紧搂着你，把脑袋贴紧了你的脖子，我知道，他就像我们的孩子。 2016年，也有努力的学习，也有加班拼搏，压抑的时候，摸一摸小橘子，就是对心灵最极致的宽慰。小橘子，一定慢慢的，慢慢的，慢慢的长啊，还想让你见证的东西太多太多，愿你喵生无忧，吾主长寿。 （附）小橘子并不是我的第一只猫，我拥有的第一只猫是从亲戚家抱来的。我记得那会刚下幼儿园，我姐带着我，瞒着我妈我爸，偷摸把他从亲戚家接回来。印象里，他的头顶有一撮黄毛，我们叫他“小黄”。只可惜，小黄不会处理自己的排泄物，这也直接导致不到半个月，小黄就被送走——谁知道，我妈是怎么踩到的呢。","tags":[{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"test_hexo+git","date":"2017-01-19T02:16:49.000Z","path":"2017/01/19/test-hexo-git/","text":"搭建博客教程预览1. node 环境下 npm install hexo -g 2. 本地文件里 hexo init 3. npm install 4. 再webstrom中打开 5. 开启服务器 hexo -s g 6. hexo new &quot;标题&quot;，建立一篇新的文章 7. hexo generate 编译 8. 在服务器地址访问自己的本地博客。 9. 远程部署： 在deploy:属性下，修改如下代码 type: git repository: https://github下存储你的博客的库链接（xxx.github.io） branch: master 10. 下载安装git支持：npm install hexo-deployer-git --save 11. 推送到github ：hexo d -g 12.输入xxx.github.io访问即可","tags":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/tags/Technology/"}]}]